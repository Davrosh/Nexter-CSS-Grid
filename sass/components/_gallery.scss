.gallery {
  background-color: $color-grey-light-1;
  grid-column: full-start / full-end;

  display: grid;

  /*
    obtained through trial and error - 
    remember: the number of columns is calculated with respect to the smallest
    element that we want to have in the container (in our case the small image
    number 7)

    height ratio is maintained using viewport units
  */
  /*grid-template-columns: repeat(8, 1fr);
    grid-template-rows: repeat(7, 5vw);*/
  grid-template: repeat(7, 5vw) / repeat(8, 1fr);

  /*
    only between rows and cols
  */
  gap: 1.5rem;
  /*
    we want space around the grid container as well
    the gutter looks like it is also outside the grid
  */
  padding: 1.5rem;

  &__item {
    &--1 {
      grid-row: 1 / span 2;
      grid-column: 1 / span 2;
    }

    &--2 {
      grid-row: 1 / span 3;
      grid-column: 3 / span 3;
    }

    &--3 {
      grid-row: 1 / span 2;
      grid-column: 6 / 7;
    }

    &--4 {
      grid-row: 1 / span 2;
      grid-column: 7 / -1;
    }

    &--5 {
      grid-row: 3 / span 3;
      grid-column: 1 / span 2;
    }

    &--6 {
      grid-row: 4 / span 2;
      grid-column: 3 / span 2;
    }

    &--7 {
      grid-row: 4 / 5;
      grid-column: 5 / 6;
    }

    &--8 {
      grid-row: 3 / span 2;
      grid-column: 6 / span 2;
    }

    &--9 {
      grid-row: 3 / span 3;
      grid-column: 8 / -1;
    }

    &--10 {
      grid-row: 6 / span 2;
      grid-column: 1 / 2;
    }

    &--11 {
      grid-row: 6 / span 2;
      grid-column: 2 / span 2;
    }

    &--12 {
      grid-row: 6 / span 2;
      grid-column: 4 / 5;
    }

    &--13 {
      grid-row: 5 / span 3;
      grid-column: 5 / span 3;
    }

    &--14 {
      grid-row: 6 / span 2;
      grid-column: 8 / -1;
    }
  }

  /*
    how do we override the deafult intrinsic aspect ratio?
    The solution - wrap every image we want to position inside the grid
    in a container, in our case a figure element, and, similar to cover in
    background images, use object-fit (needs setting both width and height
    manually)

    To clarify, the figure container helps semantically, it is o.k. to have the
    container be the grid cell itself

    It appears as if the image is not cropped on both the top and bottom, but
    instead only the bottom of the image is cropped off using object-fit: cover;

    Note:
    You can use object-position , with that property you can add X and Y
    offsets. e.g. (object-position: 100% 100%;)
    The object-position property is used together with object-fit to specify how
    an <img> or <video> should be positioned with x/y coordinates inside its
    "own content box" Default value: 50% 50% - right from the center which is
    what we ant
  */
  &__img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    /*
        get rid of whitespace after inline element.
    */
    display: block;
  }
}
