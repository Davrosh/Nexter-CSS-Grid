*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  box-sizing: inherit; }

html {
  box-sizing: border-box;
  /*
        10px/16px = 62.5% => 1rem = 10px
    */
  font-size: 62.5%; }
  @media only screen and (max-width: 75em) {
    html {
      font-size: 50%; } }

body {
  font-family: "Nunito", sans-serif;
  color: #6d5d4b;
  font-weight: 300;
  line-height: 1.6; }

/*
    .heading-i is copied to .heading in css file, like so
    .heading-1, .heading-2, .heading-3, .heading-4 {
        font-family: "Josefin Sans", sans-serif;
        font-weight: 400;
    }
*/
.heading-1, .heading-2, .heading-3, .heading-4 {
  font-family: "Josefin Sans", sans-serif;
  font-weight: 400; }

.heading-1 {
  font-size: 4.5rem;
  color: #f9f7f6;
  line-height: 1; }

.heading-2 {
  font-size: 4rem;
  font-style: italic;
  /*
        fix the "font-size is big so unusual space between lines of text"
        problem 
    */
  line-height: 1; }
  .heading-2--light {
    color: #f9f7f6; }
  .heading-2--dark {
    color: #54483a; }

.heading-3 {
  font-size: 1.6rem;
  color: #c69963;
  text-transform: uppercase; }

.heading-4 {
  font-size: 1.9rem; }
  .heading-4--light {
    color: #f9f7f6; }
  .heading-4--dark {
    color: #54483a; }

/*
    reusable margin-bottoms for different areas around the page
    we do not want to hard-code margin bottom for a REUSABLE component element
    and so we can simply add an appropriate margin-bottom class in the HTML.
    helps us plan ahead for the future
    styling a page using only small classes like that is called 'atomic css'
*/
.mb-sm {
  margin-bottom: 2rem; }

.mb-md {
  margin-bottom: 3rem; }

.mb-lg {
  margin-bottom: 4rem; }

.mb-hg {
  margin-bottom: 8rem; }

.container {
  /*
    an important thing to do - name your columns
    after hitting new breakpoints, we would like to alter the columns and so if
    we address them BY NAME the code, we do not need to change the columns we're
    spanning anywhere
  */
  display: grid;
  /*
        For the first row with the header and company logo - we would like it to
        resize its height according to the viewport height

        For the second one with the list of features - we would like to have the
        height adjust automatically when we add new items or resize and
        min-content makes the box as high as its content and resizes it when the
        window resizes.
        So for example, if you are on a device that has a viewport width of
        400px, the height of the row specified as 40vw, will have a height of
        160px (400 * 0.4 = 160). 

        For the third one with the stories - we would like its height to
        decrease as we lower the viewport width instead

        The houses list, gallery and footer elements will take the height of
        their content.
    */
  grid-template-rows: 80vh min-content 40vw repeat(3, min-content);
  /*
    We will make our own custom 8-column grid.
    A typical framework grid is 1140px wide and with 8 cols it would mean that
    each col is 1140 / 8 = 140px = 14rem wide.

    We start with an 8 rem sidebar on the left
    Then, in the middle, we have our 8 cols which are wide enough to fit their
    content and at most 14rem.

    Then, to achieve a desired space which can be utilized in some of the rows
    to create a full row design, like in the story of gallery sections, we put
    two extra columns on either side of our 8 columns. These 2 columns are the
    first to shrink when we resize the page due to their fr width but they only
    shrink up to a width of 6rem. When they hit a width of 6rem, the 8 main cols
    start shrinking.
  */
  grid-template-columns: [sidebar-start] 8rem [sidebar-end full-start] minmax(6rem, 1fr) [center-start] repeat(8, [col-start] minmax(min-content, 14rem) [col-end]) [center-end] minmax(6rem, 1fr) [full-end];
  /*     & > * {
        padding: 40px;
        font-size: 3rem;
    } */
  /*
    we will remove the side bar column on the left and and a row for it on the
    top
    the row will be 6rem wide and not 8rem like the above since after hitting
    this breakpoint 1rem is no longer 10px but 8px
  */
  /*
    first, the sidebar at the top
    then, the header section which will be just long enough so that when we
    begin scrolling down we'll get to the next section

    the next rows will be "min-content-like" on the implicit grid
    the spaces inside of the calc function ARE NEEDED
  */ }
  @media only screen and (max-width: 62.5em) {
    .container {
      grid-template-rows: 6rem 80vh min-content 40vw repeat(3, min-content);
      grid-template-columns: [full-start] minmax(6rem, 1fr) [center-start] repeat(8, [col-start] minmax(min-content, 14rem) [col-end]) [center-end] minmax(6rem, 1fr) [full-end]; } }
  @media only screen and (max-width: 50em) {
    .container {
      grid-template-rows: 6rem calc(100vh - 6rem); } }

.sidebar {
  background-color: #c69963;
  grid-column: sidebar-start / sidebar-end;
  grid-row: 1 / -1;
  /*
        simple fix: the nav-btn child is now positioned horizontally
    */
  display: flex;
  justify-content: center;
  /*
        move the sidebar to the top and the hamburger button to its center right
    */ }
  @media only screen and (max-width: 62.5em) {
    .sidebar {
      grid-column: 1 / -1;
      grid-row: 1 / 2;
      justify-content: flex-end;
      align-items: center; } }

.nav-btn {
  border: none;
  border-radius: 0;
  background-color: #fff;
  height: 2px;
  width: 4.5rem;
  /*
        so that it doesn't overflow the page and that we can see it
    */
  margin-top: 4rem;
  /*
        two other pieces of the hamburger menu
    */
  /*
        resize the hamburger to fit more naturally
    */ }
  .nav-btn::before, .nav-btn::after {
    background-color: #fff;
    height: 2px;
    width: 4.5rem;
    content: "";
    display: block; }
  .nav-btn::before {
    transform: translateY(-1.5rem); }
  .nav-btn::after {
    /*
            it is different because the space where we start counting is not
            really in the center
        */
    transform: translateY(1.3rem); }
  @media only screen and (max-width: 62.5em) {
    .nav-btn {
      margin-top: 0;
      margin-right: 3rem; }
      .nav-btn::before {
        transform: translateY(-1.2rem); }
      .nav-btn::after {
        transform: translateY(1rem); } }

.footer {
  background-color: #101d2c;
  grid-column: full-start / full-end;
  padding: 8rem; }

.nav {
  list-style: none;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(15rem, 1fr));
  /*
        doesn't add space at the end of the container like in flexbox
        gap is now available experimentally in flex
    */
  gap: 2rem;
  align-items: center;
  /*
        if you want all of the boxes to be the same size regardless of how many
        rows of text there are, add a size for the row and the implicit rows. 
    */
  grid-template-rows: 1fr;
  grid-auto-rows: 1fr; }
  .nav__link:link, .nav__link:visited {
    font-size: 1.4rem;
    color: #fff;
    text-decoration: none;
    font-family: "Josefin Sans", sans-serif;
    text-transform: uppercase;
    text-align: center;
    padding: 1.5rem;
    /*
            for padding to apply
        */
    display: block;
    transition: all .2s; }
  .nav__link:hover, .nav__link:active {
    background-color: rgba(255, 255, 255, 0.05);
    transform: translateY(-3px); }

.copyright {
  font-size: 1.4rem;
  color: #aaa;
  margin-top: 6rem;
  margin-right: auto;
  margin-left: auto;
  text-align: center;
  width: 70%; }

.realtors {
  background-color: #101d2c;
  grid-column: col-start 7 / full-end;
  padding: 3rem;
  display: grid;
  /*
    center the grid within the container
  */
  align-content: center;
  justify-content: center;
  /*
    center the items horizontally inside the grid
    the list is main content of the grid and so it is already centered and this
    visually only centers the heading
  */
  justify-items: center;
  /*
    gap between header text and realtor list
  */
  row-gap: 2rem;
  /*
    realtors under header section, spans across the width of the page
  */ }
  @media only screen and (max-width: 50em) {
    .realtors {
      grid-column: 1 / -1; } }
  .realtors__list {
    /*
        the main grid we use to style the realtors
    */
    display: grid;
    /*
        min-content for the image to have the column fit the image
        max-content for the text so that it will try not to cause a line
        break 
    */
    grid-template-columns: min-content max-content;
    column-gap: 2rem;
    /*
        on a very large screen the list is just sitting there with a lot of
        space around it, using vh helps resize the space
    */
    row-gap: 5vh;
    /*
        allows the text to appear at the center vertically aligned with the
        images
    */
    align-items: center;
    /*
      min content - for images
      max content - for text
      pic text pic text pic text
    */
    /*
      realtors one below each other
    */ }
    @media only screen and (max-width: 50em) {
      .realtors__list {
        grid-template-columns: repeat(3, min-content max-content); } }
    @media only screen and (max-width: 37.5em) {
      .realtors__list {
        grid-template-columns: min-content max-content; } }
  .realtors__img {
    width: 7rem;
    border-radius: 50%;
    display: block; }
  .realtors__sold {
    text-transform: uppercase;
    color: #aaa;
    margin-top: -3px; }

.features {
  grid-column: center-start / center-end;
  margin: 15rem 0;
  /*
        example of progressive enhancement for older browsers
    */ }
  @supports (display: grid) {
    .features {
      display: grid;
      /*
            grid-template-rows: auto auto is assumed here
            since we don't specify the rows here, this is an implicit grid
        */
      /* grid-template-columns: repeat(3, 1fr); */
      /*
            makes it inherently responsive by fitting as many columns to the
            grid of the width that we define while keeping a minimum width of
            25rem.
        */
      grid-template-columns: repeat(auto-fit, minmax(25rem, 1fr));
      gap: 6rem;
      /*
            fix the hugh gap between the title and the text under it.
            align-items is set to stretch by default.
            looks a lot better - especially after resizing the viewport
        */
      align-items: start; } }

/*
    a component that could be reused anywhere but is semantically related to the
    features container
*/
.feature {
  /*
        example of progressive enhancement for older browsers
    */
  float: left;
  width: 33.3333%;
  margin-bottom: 6rem;
  /*
        what gets ignored automatically by grid, grid items, flex and flex items
        is floats, display: inline-block, display: table-cell and vertical align
        reset width and margin bottom
    */
  /*
        a grid inside the features grid (inside the overall grid ;) ) -
        the columns are explicit - the left one holds the icon and is wide
        enough to make it fit inside it and the other uses the rest of the
        available space. 
    */
  display: grid;
  grid-template-columns: min-content 1fr;
  row-gap: 1.5rem;
  column-gap: 2.5rem; }
  @supports (display: grid) {
    .feature {
      width: auto;
      margin-bottom: 0; } }
  .feature__icon {
    fill: #c69963;
    width: 4.5rem;
    height: 4.5rem;
    /*
            now the icon gets the top and bottom row for itself and the text
            gets pushed rightwards to column 2
            grid-row: 1 / -1; would NOT work at this case because -1 is the end
            of the explicit grid and we haven't defined any explicit rows.
        */
    grid-row: 1 / span 2;
    transform: translateY(-1rem); }
  .feature__text {
    font-size: 1.7rem; }

.story__pictures {
  background-color: #c69963;
  grid-column: full-start / col-end 4;
  /*
        background image
        linear gradient with two equal colors trick for nice overlay effect
    */
  background-image: linear-gradient(rgba(198, 153, 99, 0.5), rgba(198, 153, 99, 0.5)), url(../img/back.jpg);
  background-size: cover;
  /*
        uses a 6x6 grid to position the two overlapping images
        the two cols on either side let us center the image exactly in the
        middle.
    */
  display: grid;
  grid-template-rows: repeat(6, 1fr);
  grid-template-columns: repeat(6, 1fr);
  /*
        aligns grid items to their grid cells in the column axis
    */
  align-items: center;
  /*
      pictures span the width with some padding
    */ }
  @media only screen and (max-width: 50em) {
    .story__pictures {
      grid-column: 1 / -1;
      padding: 6rem; } }

.story__img--1 {
  /*
        images have an intrinsic aspect ratio associated with them and so they
        do not expand to fit their area of the grid
    */
  width: 100%;
  grid-row: 2 / 6;
  grid-column: 2 / 6;
  box-shadow: 0 2rem 5rem rgba(0, 0, 0, 0.1);
  /*
      the first image spans most of the pictures grid columns and all the rows
    */ }
  @media only screen and (max-width: 50em) {
    .story__img--1 {
      grid-column: 1 / 5;
      grid-row: 1 / -1; } }

.story__img--2 {
  /*
        for the schick overflow effect
    */
  width: 115%;
  grid-row: 4 / 6;
  grid-column: 4 / 7;
  /*
        for the schick overflow effect
    */
  z-index: 20;
  box-shadow: 0 2rem 5rem rgba(0, 0, 0, 0.2);
  /*
      second pic also span all rows in pictures grid, make it less large
    */ }
  @media only screen and (max-width: 50em) {
    .story__img--2 {
      grid-row: 1 / -1;
      width: 100%; } }

.story__content {
  background-color: #f9f7f6;
  grid-column: col-start 5 / full-end;
  padding: 6rem 8vw;
  /*
            Alternative approach
        */
  /*
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: flex-start;
        */
  display: grid;
  /*
            Justifies ALL GRID CONTENT on column axis when total grid size is
            smaller than container. 
        */
  align-content: center;
  /*
            Aligns content in a grid item along the ROW axis.

            the button is now shoved to the left and is no longer stretched out
            across the entire row.
        */
  justify-items: start;
  /*
      story content spans width
      places the row explicitly - below the features and above the pictures
    */ }
  @media only screen and (max-width: 50em) {
    .story__content {
      grid-column: 1 / -1;
      grid-row: 5 / 6; } }

.story__text {
  font-size: 1.5rem;
  font-style: italic;
  /*
            not a reusable element so we can afford to hard-code a margin-bottom
        */
  margin-bottom: 4rem; }

.homes {
  grid-column: center-start / center-end;
  margin: 15rem 0;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(25rem, 1fr));
  gap: 7rem; }

.home {
  background-color: #f9f7f6;
  /*
        many times we set the columns and have css calc the rows automatically
    */
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  row-gap: 3.5rem;
  /*
        we add a margin at the top because we can't have different row gaps and
        we want more space
    */
  /*
        button span all columns
    */ }
  .home__img {
    width: 100%;
    /*
            we need to specify this explicitly otherwise the heart icon will
            push the image down
        */
    grid-row: 1 / 2;
    grid-column: 1 / -1;
    z-index: 1; }
  .home__like {
    grid-row: 1 / 2;
    grid-column: 2 / 3;
    fill: #c69963;
    height: 2.5rem;
    width: 2.5rem;
    z-index: 2;
    /*
            align a specific item inside a grid cell
        */
    justify-self: end;
    margin: 1rem; }
  .home__name {
    /*
            Actually in the picture's row, spanning all columns
            
            We could also consider not specifying a row and then it would be in
            below that of the image and then proceed to translate it upwards -
            this would create a half empty row that isn't used for anything and
            and an extra gap - our solution doesn't have that.
        */
    grid-row: 1 / 2;
    grid-column: 1 / -1;
    /*
            In its cell - center of line and at the bottom 
        */
    justify-self: center;
    align-self: end;
    /*
            explicit z-index, above the image
        */
    z-index: 3;
    width: 80%;
    font-family: "Josefin Sans", sans-serif;
    font-size: 1.6rem;
    text-align: center;
    padding: 1.25rem;
    background-color: #101d2c;
    color: #fff;
    font-weight: 400;
    /*
            slightly overflowing below the image, 50% of the element itself
        */
    transform: translateY(50%); }
  .home__location, .home__rooms {
    margin-top: 2.5rem; }
  .home__location, .home__rooms, .home__area, .home__price {
    font-size: 1.5rem;
    margin-left: 2rem;
    /*
            group together and align vertically
        */
    display: flex;
    align-items: center; }
    .home__location svg, .home__rooms svg, .home__area svg, .home__price svg {
      fill: #c69963;
      height: 2rem;
      width: 2rem;
      margin-right: 1rem; }
  .home__btn {
    grid-column: 1 / -1; }

.gallery {
  background-color: #f9f7f6;
  grid-column: full-start / full-end;
  display: grid;
  /*
    obtained through trial and error - 
    remember: the number of columns is calculated with respect to the smallest
    element that we want to have in the container (in our case the small image
    number 7)

    height ratio is maintained using viewport units
  */
  /*grid-template-columns: repeat(8, 1fr);
    grid-template-rows: repeat(7, 5vw);*/
  grid-template: repeat(7, 5vw)/repeat(8, 1fr);
  /*
    only between rows and cols
  */
  gap: 1.5rem;
  /*
    we want space around the grid container as well
    the gutter looks like it is also outside the grid
  */
  padding: 1.5rem;
  /*
    how do we override the deafult intrinsic aspect ratio?
    The solution - wrap every image we want to position inside the grid
    in a container, in our case a figure element, and, similar to cover in
    background images, use object-fit (needs setting both width and height
    manually)

    To clarify, the figure container helps semantically, it is o.k. to have the
    container be the grid cell itself

    It appears as if the image is not cropped on both the top and bottom, but
    instead only the bottom of the image is cropped off using object-fit: cover;

    Note:
    You can use object-position , with that property you can add X and Y
    offsets. e.g. (object-position: 100% 100%;)
    The object-position property is used together with object-fit to specify how
    an <img> or <video> should be positioned with x/y coordinates inside its
    "own content box" Default value: 50% 50% - right from the center which is
    what we ant
  */ }
  .gallery__item--1 {
    grid-row: 1 / span 2;
    grid-column: 1 / span 2; }
  .gallery__item--2 {
    grid-row: 1 / span 3;
    grid-column: 3 / span 3; }
  .gallery__item--3 {
    grid-row: 1 / span 2;
    grid-column: 6 / 7; }
  .gallery__item--4 {
    grid-row: 1 / span 2;
    grid-column: 7 / -1; }
  .gallery__item--5 {
    grid-row: 3 / span 3;
    grid-column: 1 / span 2; }
  .gallery__item--6 {
    grid-row: 4 / span 2;
    grid-column: 3 / span 2; }
  .gallery__item--7 {
    grid-row: 4 / 5;
    grid-column: 5 / 6; }
  .gallery__item--8 {
    grid-row: 3 / span 2;
    grid-column: 6 / span 2; }
  .gallery__item--9 {
    grid-row: 3 / span 3;
    grid-column: 8 / -1; }
  .gallery__item--10 {
    grid-row: 6 / span 2;
    grid-column: 1 / 2; }
  .gallery__item--11 {
    grid-row: 6 / span 2;
    grid-column: 2 / span 2; }
  .gallery__item--12 {
    grid-row: 6 / span 2;
    grid-column: 4 / 5; }
  .gallery__item--13 {
    grid-row: 5 / span 3;
    grid-column: 5 / span 3; }
  .gallery__item--14 {
    grid-row: 6 / span 2;
    grid-column: 8 / -1; }
  .gallery__img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    /*
        get rid of whitespace after inline element.
    */
    display: block; }

.btn {
  background-color: #c69963;
  color: #fff;
  /*
        because by default it has some - and we don't want it
    */
  border: none;
  border-radius: 0;
  font-family: "Josefin Sans", sans-serif;
  font-size: 1.5rem;
  text-transform: uppercase;
  padding: 1.8rem 3rem;
  cursor: pointer;
  transition: all .2s; }
  .btn:hover {
    background-color: #b28451; }

.header {
  background-color: #54483a;
  grid-column: full-start / col-end 6;
  /* 
        background image
  */
  background-image: linear-gradient(rgba(16, 29, 44, 0.93), rgba(16, 29, 44, 0.93)), url(../img/hero.jpeg);
  background-size: cover;
  background-position: center;
  padding: 8rem;
  /*
    override for top
  */
  padding-top: 4rem;
  /*
    spaces between lines of text using explicitly setting heights for the rows
    minmax(6rem, min-content) so that the text doesn't get overlapped on screens
    where 6rem is too big
  */
  display: grid;
  grid-template-rows: 1fr min-content minmax(6rem, min-content) 1fr;
  /*
    column should never be wider of narrower than the content
  */
  grid-template-columns: minmax(min-content, max-content);
  row-gap: 1.5rem;
  /*
    grid is centered horizontally inside its container even when window is
    resized awkwardly
  */
  justify-content: center;
  /*
    header section spans across the width of the page now that the sidebar is
    above it and the realtors behind it
  */
  /*
    without these, the button will simply stretch to fill its container
  */
  /*
    To create the seen on effect we will make a new grid
    The grid items of the new grid are the text itself (text too can be treated
    as a grid item) and before and after elements, which will be used to create
    the horizontal lines.
  */ }
  @media only screen and (max-width: 50em) {
    .header {
      grid-column: 1 / -1; } }
  @media only screen and (max-width: 37.5em) {
    .header {
      padding: 5rem; } }
  .header__logo {
    height: 3rem;
    justify-self: center; }
  .header__btn {
    align-self: start;
    justify-self: start; }
  .header__seenon-text {
    display: grid;
    /*
        max-content and not min-content so that the text doesn't break into a
        new line
    */
    grid-template-columns: 1fr max-content 1fr;
    column-gap: 1.5rem;
    align-items: center;
    font-size: 1.6rem;
    color: #aaa; }
    .header__seenon-text::before, .header__seenon-text::after {
      content: "";
      height: 1px;
      display: block;
      background-color: currentColor; }
  .header__seenon-logos {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    column-gap: 3rem;
    /*
        center all logos inside of their grid cells
    */
    justify-items: center;
    /*
      align the company logos vertically
    */
    align-items: center; }
    .header__seenon-logos img {
      /*
        set max height so that the images scale down when viewport is resized
        need to set max width so that it works properly
        if the corresponding grid column is set to max-content then this would
        not work, therefore, we'll change it to minmax(min-content, max-content)
      */
      max-height: 2.5rem;
      max-width: 100%;
      /*
        more gray
      */
      filter: brightness(70%); }
